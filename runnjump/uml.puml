@startuml
class com.mygdx.runnjump.util.SoundHandler {
~ ImageButton soundBt
~ Runnjump theGame
+ void changed(ChangeEvent,Actor)
}
class com.mygdx.runnjump.util.TextureManager {
- TreeMap<String,ArrayList<Texture>> playerFrames
~ Random random
+ void addPlayerFrameSet(String,String,int)
+ ArrayList<Texture> getPlayerFrameSet(String)
+ void dispose()
}
class com.mygdx.runnjump.screens.LevelScreen {
~ int levelSelected
~ Label levelSelectIndicator
~ String lvlSlctStr
+ int getLevelSelected()
- void updateLevelSelectIndicator()
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.runnjump.util.SoundManager {
- TreeMap<String,Sound> soundMap
- TreeMap<String,Sound[]> soundSet
- float volume
~ Random random
+ void muteSound()
+ void addSoundSet(String,String[])
+ void addSound(String,String)
+ void playSound(String)
+ void playRandom(String)
+ void dispose()
}
class com.mygdx.runnjump.screens.GameScreen {
~ int level
~ OrthogonalTiledMapRenderer mapRenderer
~ TiledMap tileMap
~ Hud hud
~ int tileMapWidth
~ int tileMapHeight
~ OrthographicCamera orthographicCamera
~ Player player
~ float zoom
~ MapProperties mapProperties
~ float width
~ float spawnPointX
~ boolean gameOver
- float timeSinceWin
+ void respawnPlayer()
+ void startGame(int)
+ void show()
+ void render(float)
+ void resize(int,int)
+ boolean touchDown(int,int,int,int)
+ boolean keyUp(int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.runnjump.game.Hud {
+ Stage stage
- Viewport viewport
- Label scoreL
- Runnjump theGame
- BitmapFont gameoverFont
- Touchpad movementJoystick
- Button jumpBt
+ void setScore(int)
+ void setLives(int)
+ void dispose()
+ Touchpad getMovementJoystick()
+ Button getJumpBt()
+ void gameOver(int)
+ void gameWon(int,int)
}
class com.mygdx.runnjump.screens.MenuScreen {
+ void initGui()
+ void show()
+ void render(float)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
abstract class com.mygdx.runnjump.screens.ScreenBase {
+ TextureRegion background
+ Stage stage
~ Skin skin
~ SpriteBatch batch
+ Runnjump.ScreenEn currentScreenId
~ InputMultiplexer inputMultiplexer
+ Runnjump theGame
+ void show()
+ void resize(int,int)
+ void render(float)
+ void dispose()
+ boolean keyDown(int)
+ boolean keyUp(int)
+ boolean keyTyped(char)
+ boolean touchDown(int,int,int,int)
+ boolean touchUp(int,int,int,int)
+ boolean touchDragged(int,int,int)
+ boolean mouseMoved(int,int)
+ boolean scrolled(int)
}
class com.mygdx.runnjump.Runnjump {
+ SoundManager soundManager
+ MusicManager musicManager
+ TextureManager textureManager
+ {static} TreeMap<String,TextureAtlas> textureAtlasMap
+ {static} ScreenEn currentScreen
+ {static} ScreenEn previousScreen
+ ImageButton soundBt
- MenuScreen menuScreen
- LoadingScreen loadingScreen
- GameScreen gameScreen
- LevelScreen levelScreen
- HighScoresScreen highScoresScreen
- int levelSelected
+ void setLevelSelected(int)
+ void create()
+ void changeScreen(ScreenEn)
+ void render()
+ void dispose()
}
class com.mygdx.runnjump.screens.LoadingScreen {
- void loadPlayer()
- void loadGraphics()
- void loadSoundFX()
- void loadMusic()
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.runnjump.screens.HighScoresScreen {
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.runnjump.game.Enemy {
- Vector2 velocity
- float speedX
- float speedY
- float gravity
- boolean gravityPowerUp
~ boolean canJump
~ float sizeX
~ Sprite enemySprite
- boolean goingBack
+ void draw(Batch)
+ void update(float)
}
class com.mygdx.runnjump.util.MusicManager {
- TreeMap<String,Music> musicMap
- TreeMap<String,Music[]> musicSet
- float volume
~ Random rand
~ Music currentlyPlaying
+ void addMusic(String,String)
+ void addMusicSet(String,String[])
+ void playMusic(String)
+ void playRandom(String)
+ void muteMusic()
+ void stopMusic()
+ void stopAll()
+ void dispose()
}
class com.mygdx.runnjump.game.Player {
- Vector2 velocity
- float speedX
- float speedY
- float gravity
- boolean gravityPowerUp
- float powerUpTime
- TiledMapTileLayer collisionLayer
- TiledMapTileLayer visualLayer
- int score
- boolean goldKeyAcquired
- int STARTING_HEARTS
- boolean canJump
- float sizeX
- Sprite playerSprite
- boolean facingRight
- boolean alive
- float time
- SoundManager soundManager
- boolean gameWon
- int playerIdleLastFrame
- boolean backWardsIdle
- ArrayList<Texture> playerIdle
- Hud hud
- float timeWon
- void setLogicalSize(float,float)
+ int getHearts()
+ int getScore()
+ void setFrame(Texture)
+ void draw(Batch)
- boolean collidesSouth()
- boolean collidesEast()
- boolean collidesWest()
- boolean collidesNorth()
- void handleMisc(float,float)
- void gravityPowerup()
- void removeCollectibe(int,int)
- void handleCollectible(float,float)
- void update(float)
- boolean isCellMisc(float,float)
- boolean isCellCollectible(float,float)
- boolean cellKillsPlayer(float,float)
- boolean isCellBlocked(float,float)
+ boolean keyDown(int)
+ Sprite getPlayerSprite()
+ boolean keyUp(int)
+ boolean keyTyped(char)
+ boolean touchDown(int,int,int,int)
+ boolean touchUp(int,int,int,int)
+ boolean touchDragged(int,int,int)
+ boolean mouseMoved(int,int)
+ boolean scrolled(int)
+ boolean isDead()
- void die()
- boolean isRunning()
- boolean inAir()
- boolean isIdle()
+ boolean respawn()
+ void setLayers(TiledMapTileLayer,TiledMapTileLayer)
+ void restart()
+ boolean isGameWon()
+ float getTimeWon()
}


com.badlogic.gdx.scenes.scene2d.utils.ChangeListener <|-- com.mygdx.runnjump.util.SoundHandler
com.badlogic.gdx.utils.Disposable <|.. com.mygdx.runnjump.util.TextureManager
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.LevelScreen
com.mygdx.runnjump.screens.ScreenBase <|-- com.mygdx.runnjump.screens.LevelScreen
com.badlogic.gdx.utils.Disposable <|.. com.mygdx.runnjump.util.SoundManager
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.GameScreen
com.badlogic.gdx.InputProcessor <|.. com.mygdx.runnjump.screens.GameScreen
com.mygdx.runnjump.screens.ScreenBase <|-- com.mygdx.runnjump.screens.GameScreen
com.badlogic.gdx.utils.Disposable <|.. com.mygdx.runnjump.game.Hud
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.MenuScreen
com.mygdx.runnjump.screens.ScreenBase <|-- com.mygdx.runnjump.screens.MenuScreen
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.ScreenBase
com.badlogic.gdx.InputProcessor <|.. com.mygdx.runnjump.screens.ScreenBase
com.badlogic.gdx.Game <|-- com.mygdx.runnjump.Runnjump
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.LoadingScreen
com.mygdx.runnjump.screens.ScreenBase <|-- com.mygdx.runnjump.screens.LoadingScreen
com.badlogic.gdx.Screen <|.. com.mygdx.runnjump.screens.HighScoresScreen
com.mygdx.runnjump.screens.ScreenBase <|-- com.mygdx.runnjump.screens.HighScoresScreen
com.badlogic.gdx.utils.Disposable <|.. com.mygdx.runnjump.util.MusicManager
com.badlogic.gdx.InputProcessor <|.. com.mygdx.runnjump.game.Player
@enduml